/* Assume you are an awesome parent and want to give your children some cookies... But, you should give each child at most one cookie...
Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]...
If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content...
Your goal is to maximize the number of your content children and output the maximum number...
* Eg 1: g = [1, 2, 3]                     s = [1, 1]             Output = 1
* Eg 2: g = [1, 2]                        s = [1, 2, 3]          Output = 2     */
import java.util.*;
public class Cookies 
{
    public int SatisfiedChildren(Vector<Integer> children, Vector<Integer> cookies)
    {
        Collections.sort(children);      // Sorting the children vector...
        Collections.sort(cookies);       // Sorting the cookies vector...
        int i = 0, j = 0, count = 0;
        while(j < cookies.size() || i < children.size())
        {
            if(i == children.size())     // If the end of the vector is reached...
                break;
            if(j == cookies.size())      // If the end of the vector is reached...
                break;
            if(cookies.get(j) >= children.get(i))     // If children greed is less than the cookie size...
            {
                j++;     // Increment cookie counter...
                i++;         // Increment children counter...
                count++;     // Increment the satisfied children count...
            }
            else if(cookies.get(j) < children.get(i))
                i++;       // If the current children is unsatisfied...
        }
        return count;      // return the number of satisfied children...
    }
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int x, a;
        System.out.print("Enter the number of Children : ");
        x = sc.nextInt();
        Vector<Integer> children = new Vector<Integer>(x);    // Creating vectors...
        for(int i = 0; i < x; i++)
        {
            System.out.print("Enter the value : ");
            a = sc.nextInt();
            children.add(i, a);
        }
        System.out.print("Enter the number of Cookies : ");
        x = sc.nextInt();
        Vector<Integer> cookies = new Vector<Integer>(x);  
        for(int i = 0; i < x; i++)
        {
            System.out.print("Enter the value : ");
            a = sc.nextInt();
            cookies.add(i, a);
        }
        Cookies cookie = new Cookies();      // Object creation...
        x = cookie.SatisfiedChildren(children, cookies);     // Function calling...
        System.out.println("The Number of Children Satisfied are : "+x);
        sc.close();
    }
}


// Time Complexity  - O(n log n) time...
// Space Complexity - O(n + m) time...

/* DEDUCTIONS
 * 1. Sorting the two vectors gives us a relative idea about greed and size of cookies for every iteration...
 * 2. Then, we can perform the relative increment of the counter variables...
 */